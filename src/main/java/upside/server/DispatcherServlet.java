package upside.server;

import java.io.OutputStream;
import java.net.URI;
import java.util.Map;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import upside.federation.FederationManager;
import upside.federation.FederationManagerFactory;
import upside.site.Category;
import upside.site.Feature;
import upside.site.Site;
import upside.utils.Exceptions;
import upside.utils.HtmlBuilder;

public class DispatcherServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        try {
            System.out.println("Request : " + request.getRequestURI());

            String path = new URI(request.getRequestURI()).getPath();

            if (path.endsWith(Site.SITEXML)) {
                doSite(path, response.getOutputStream());
            } else if (path.endsWith("/") || path.endsWith("/index.html")) {
                toIndex(path, response.getOutputStream());
            } else {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw Exceptions.re(e);
        }
        response.setStatus(HttpServletResponse.SC_OK);
    }

    private String getSiteName(String path) {
        String[] s = path.split("/");
        return s[s.length - 2];
    }

    private void doSite(String path, OutputStream out) {

        Site merged = getSite(getSiteName(path));

        try {
            out.write(merged.toString().getBytes("UTF-8"));
        } catch (Exception e) {
            throw Exceptions.re(e);
        }
    }

    private void toIndex(String path, OutputStream out) {
        String siteName = getSiteName(path);
        Site merged = getSite(siteName);

        HtmlBuilder html = new HtmlBuilder();
        try {
            html.html();
            html.head();
            html.title("Upside - The update site federator - " + siteName);
            html.close();
            html.body();
            String url = merged.getDescription().getUrl();
            html.text(
                "This is an update site for Eclipse, generated by " +
                "<a href=\"http://github.com/torkjel/upside\">Upside</a> - The update site federator" +
                "<p>" +
                "Name: " + siteName + "<br>" +
                "URL: <a href=\"" + url + "\">" + url + "</a><br>" +
                "Description: " + merged.getDescription().getDescription() + "" +
                "<p>" +
                "This site includes plugins from the following update sites:");
            html.ul();
            Map<String, Site> sites = fm().getOriginSites(siteName);
            for (String name : sites.keySet()) {
                Site site = sites.get(name);
                html.li("<a href=\"" + site.getDescription().getUrl() + "\">" + name + "</a>" +
                        "<br>" +
                        "<i>" + site.getDescription().getDescription() + "</i>");
            }
            html.close();

            html.text("Add this update site (<b>" + url + "</b>) to your Eclipse installation to install the following plugins:");

            html.ul();
            for (Category category : merged.getCategories()) {
                html.li(category.getLabel());
                html.ul();
                for (Feature f : merged.getFeaturesIn(category))
                    html.li(f.getId() + "/" + f.getVersion());
                html.close();
            }
            html.close();

            html.ul();
            for (Feature f : merged.getFeaturesWithoutCategory())
                html.li(f.getId() + "/" + f.getVersion());
            html.close();

            html.close();
            html.close();
            out.write(html.toString().getBytes("UTF-8"));
        } catch (Exception e) {
            throw Exceptions.re(e);
        }

    }

    private Site getSite(String siteName) {
        Site merged = fm().getFederatedSite(siteName);
        if (merged == null)
            throw new IllegalArgumentException("Site not found: " + siteName);
        return merged;
    }

    private FederationManager fm() {
        return FederationManagerFactory.getFederationManager();
    }
}
